# 기존의 시간복잡도 n**2인 다익스트라는 파이썬 기준 1초 2000만번 연산의 한계로
# n이 5000개 넘어가면 답 없었다.
#그래서 시간복잡도를 개선시킨, 힙을 사용한 다익스트라 알고리즘.
#시간복잡도 E*logV(중복 간선 포함하지 않은 경우!)

# input 밑에거 복사하세요
'''
6 11
1
1 2 2
1 4 1
1 3 5
2 3 3
2 4 2
3 2 3
3 6 5
4 5 1
5 3 1
5 6 2
4 3 3
답이 0 2 3 1 2 4 나와야함
'''


import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)
n,m = map(int,input().split())
start = int(input())

graph = [[] for i in range(n+1)]
visited = [False]*(n+1)
distance = [INF]*(n+1)

for _ in range(m):
    a,b,c = map(int,input().split())
    graph[a].append((b,c))#왜 튜플로 항상 넣는거지. 바꿀 필요가 없으니까? 튜플이 더 장점이 있는걸까???D

def dijkstra(start):
    q = []
    heapq.heappush(q,(0,start))#순서는 거리, 노드번호인데 앞쪽을 기준으로 정렬하기 때문에, 기준이 되는 거리를 앞에 놔둠.
    distance[start] = 0
    while q:#큐가 빌 때까지
        dist,now = heapq.heappop(q) # 최단거리, 가장 최단거리가 짧은 노드번호를 빼줌.
        if distance[now] < dist:
        # 해당 노드의 최단거리를 가져왔는데, 그 값이 원래 값보다 크다? 그 말은 이미 최단거리가 정해졌다는 뜻. 이건 필요없는값
            continue
        for i in graph[now]:
            #i[0]: 노드번호, i[1]: now->i[0]까지의 그 노드까지 거리
            cost = dist + i[1]
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q,(cost, i[0]))

dijkstra(start)
for i in range(1,n+1):
    if distance[i] == INF:
        print('INFINITY')
    else:
        print(distance[i])
